//**SFML 설치방법**
//1.인터넷에 SFML 검색하고 운영체제 맞게 설치 (난 64, 비주얼스튜디오2022)
//2.설치한 파일의 위치 알아두고, 비주얼에서 프로젝트 파일 하나 만들어 소스파일에 main.cpp 만든다
//3.솔루션 탐색기에서 SFML_start라 되어있고 그 하단에 소스파일이나 리소스파일이 있는데 프로젝트 이름을 우클릭하고 속성을 누른다
//4.속성에서 모든 속성으로 바꿔주고,c/c++의 일반에 추가 포함 디렉터리에 SFML의 include위치를 입력한다.
//5.구성 속성 - 링커 - 일반 - 추가 라이브러리 디렉터리에 SFML의 lib 폴더를 저장한다.
//6. 구성 속성 - 링커 - 입력 - 추가 종속성을 클릭하면 아래와 같이 편집이 나타난다 
//7. 나타나는 빈창에 아래를 복사해서 입력한 뒤 확인 버튼을 누르면 입력이 완료된다.
//sfml - main - d.lib; sfml - graphics - d.lib; sfml - window - d.lib; sfml - system - d.lib; sfml - audio - d.lib; sfml - network - d.lib
//"sfml-xxx-d.lib"은 Debug용 "sfml-xxx.lib"는 Release용이다.여기서는 d가 붙어있으니 디버깅용으로 사용된다.
//8.SFML 폴더 안 bin풀더안에 있는 파일들을 프로젝트가 위치한 폴더로 이동시켜 준다.
//9.그리고 스튜디오 오른쪽에 있는 솔루션 탐색기에서 모든 파일 표시를 클릭해 각종. dll파일들이 있는지 확인한 뒤 모두 프로젝트에 포함해준다.
//10. 밑에 있는 코드를 복사해 실행한다
//출처: https://kali-live.tistory.com/33 [KALILIVE:티스토리]

#include <SFML/Graphics.hpp> //SFML의 그래픽 모듈 사용하기위해 헤더파일 포함함.다양한 그래픽 객체와 함수제공해서 화면에 그래픽 그리고 조작가능하게 함
using namespace sf; //sf라는 이름공간이 있고, 이 이름공간에 들어있는 함수나 클래스들을 사용가능, using 지시어를 사용해 using namespace sf; 로  sf:: 생략가능
int main() { //기본적으로 넣어야 하는 메인 함수
	RenderWindow window(VideoMode(600, 600), "GOOD SFML!"); //RenderWindow의 window라는 객체를 만들고 매개변수를 VideoMode(200, 200), "SFML works!"로 놓음
	//VideoMode(200, 200)는 화면 크기(width,height)이다. "SFML works!"는 빌드하면 나오는 제목 타이틀 이름이다.
	CircleShape shape(300); // 원 객체를 만들고 ()안에 사이즈 크기 정할 수 있음 화면에 100사이즈의 원을 표시하기 위해 100의 매개변수를 받아 생성자에 넣게된다.
	//VideoMode(600, 600) 이고 CircleShape shape(300); 의 원사이즈는 가로 300,세로 300으로 지정이 된다. 즉 화면을 꽉채우는 원이 만들어진다.
	//**궁금한것**
	//Q.근데 원의 가로 사이즈와 세로 사이즈를 조절할 수 있게 매개변수를 두 개를 받을 수 있는진 모르겠다.
	//A.결론은 어렵다. 매개변수 값을 받으면 그 값은 반지름값이 되고 계산을 하기 때문에 RectangleShape를 사용해 사각형 그리고 이를 회전해 원보이게 하는것처럼 해야하는데 복잡하고 계산많아서 성능저하될수있음
	//Q.근데 원의 면적은 3.14*반지름*반지름인데 이러면 원의 크기가 더 커지지않나?
	//A.실제는 맞는데 SFML의 CircleShape 클래스는 원 그릴때 반지름으로 원의 외접사각형을 만들고,
	  //원 형태로 만들기 위해 사각형의 모서리 부분을 사각형으로 다듬어서 부드럽게 만들어줘서 원의 형태로 만든다(자세히보면 윤곽선이 각져있긴함)
	shape.setFillColor(Color::Green); //원 객체의 색깔을 지정함 ()안에 색을 초록색으로 지정함.

	//실행
	while (window.isOpen()){ //윈도우가 열려있는동안 계속 반복
							 //윈도우가 열려있는동안에는 window.isOpen()에서 참을 반환하고,윈도우가 닫혔다면 거짓을 반환한다.
		
		Event event; //event 객체 생성
		while (window.pollEvent(event)) //이벤트 발생할때 뭔가 버튼을 누르거나 동작을 할때 이 while 문이 실행됨//사용자가 윈도우를 조작할때 생기는 이벤트를 처리가능,예를 들어 키보드 입력이나 마우스 클릭하는 이벤트
		{ //윈도우에서 발생한 이벤트 확인하고 그 이벤트를 event 변수에 저장하는역할을 함
			if (event.type == Event::Closed) //화면에 x를 눌렀을때 윈도우가 종료됨 //현재 이벤트의 타입이 윈도우가 닫히는 이벤트인지 검사함.즉 x버튼눌러 윈도우 닫거나 닫기 눌러서 끄는것감지
				window.close(); //현재 열려있는 윈도우를 닫는 역할을 함,위 if문 발생하면 close 함수 호출해 종료시킴
		}
		window.clear(); //화면을 초기화해서 화면 깨끗하게 지우는 멤버함수
		window.draw(shape); //shape 객체를 화면에 그려내는 멤버함수 //즉 객체로 원이나 물체를 만들었어도 [윈도우객체이름]draw([화면에 출력할 객체이름]);같이 draw 멤버함수를 사용하지 않으면 화면에 출력되지 않는다.
		window.display(); //그래픽 윈도우에 그려진 내용을 실제로 보이게 해줌.화면이 보이게 됨. //이거 안쓰면 화면이 하얘짐,즉 화면에 출력되지않아 원도 보이지 않게 됨
	
	}
	return 0;
}
